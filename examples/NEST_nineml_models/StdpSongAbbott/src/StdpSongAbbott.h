/*
  This file was generated by PyPe9 version 0.2 on Fri 30 Apr 21 06:51:23PM
  Based on stdp_connection.h, which is part of NEST
  First Version of Jinja template: March 2020
  Author: Pedro Garcia-Rodriguez, ICN, CNRS, France
*/

/*
 *  stdp_connection_StdpSongAbbott.h
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef STDP_CONNECTION_STDPSONGABBOTT_H
#define STDP_CONNECTION_STDPSONGABBOTT_H

/* BeginDocumentation
  Name: stdp_synapse - Synapse type for spike-timing dependent
   plasticity.

  Description:
   stdp_synapse is a connector to create synapses with spike time
   dependent plasticity (as defined in [1]). Here the weight dependence
   exponent can be set separately for potentiation and depression.

  Parameters:
  tauLTP
  aLTP
  tauLTD
  aLTD
  wmax
  wmin

  Transmits: SpikeEvent

  References:
  \verbatim embed:rst
  .. [1] Guetig et al. (2003). Learning input correlations through nonlinear
         temporally asymmetric hebbian plasticity. Journal of Neuroscience,
         23:3697-3714 DOI: https://doi.org/10.1523/JNEUROSCI.23-09-03697.2003
  .. [2] Rubin J, Lee D, Sompolinsky H (2001). Equilibrium
         properties of temporally asymmetric Hebbian plasticity. Physical Review
         Letters, 86:364-367. DOI: https://doi.org/10.1103/PhysRevLett.86.364
  .. [3] Song S, Miller KD, Abbott LF (2000). Competitive Hebbian learning
         through spike-timing-dependent synaptic plasticity. Nature Neuroscience
         3(9):919-926.
         DOI: https://doi.org/10.1038/78829
  .. [4] van Rossum MCW, Bi G-Q, Turrigiano GG (2000). Stable Hebbian learning
         from spike timing-dependent plasticity. Journal of Neuroscience,
         20(23):8812-8821.
         DOI: https://doi.org/10.1523/JNEUROSCI.20-23-08812.2000
  \endverbatim
*/

// C++ includes:
#include <cmath>

// Includes from nestkernel:
#include "common_synapse_properties.h"
#include "connection.h"
#include "connector_model.h"
#include "event.h"

// Includes from sli:
#include "dictdatum.h"
#include "dictutils.h"

namespace nest
{

// connections are templates of target identifier type (used for pointer /
// target index addressing) derived from generic connection template
template < typename targetidentifierT >
class STDPConnection_StdpSongAbbott : public Connection< targetidentifierT >
{

public:
  typedef CommonSynapseProperties CommonPropertiesType;
  typedef Connection< targetidentifierT > ConnectionBase;

  /**
   * Default Constructor.
   * Sets default values for all parameters. Needed by GenericConnectorModel.
   */
  STDPConnection_StdpSongAbbott();


  /**
   * Copy constructor.
   * Needs to be defined properly in order for GenericConnector to work.
   */
  STDPConnection_StdpSongAbbott( const STDPConnection_StdpSongAbbott& );

  // Explicitly declare all methods inherited from the dependent base
  // ConnectionBase. This avoids explicit name prefixes in all places these
  // functions are used. Since ConnectionBase depends on the template parameter,
  // they are not automatically found in the base class.
  using ConnectionBase::get_delay_steps;
  using ConnectionBase::get_delay;
  using ConnectionBase::get_rport;
  using ConnectionBase::get_target;

  /**
   * Get all properties of this connection and put them into a dictionary.
   */
  void get_status( DictionaryDatum& d ) const;

  /**
   * Set properties of this connection from the values given in dictionary.
   */
  void set_status( const DictionaryDatum& d, ConnectorModel& cm );

  /**
   * Send an event to the receiver of this connection.
   * \param e The event to send
   * \param cp common properties of all synapses (empty).
   */
  void send( Event& e, thread t, const CommonSynapseProperties& cp );


  class ConnTestDummyNode : public ConnTestDummyNodeBase
  {
  public:
    // Ensure proper overriding of overloaded virtual functions.
    // Return values from functions are ignored.
    using ConnTestDummyNodeBase::handles_test_event;
    port
    handles_test_event( SpikeEvent&, rport )
    {
      return invalid_port_;
    }
  };

  void
  check_connection( Node& s, Node& t, rport receptor_type, const CommonPropertiesType& )
  {
    ConnTestDummyNode dummy_target;

    ConnectionBase::check_connection_( dummy_target, s, t, receptor_type );

    t.register_stdp_connection( t_lastspike_ - get_delay(), get_delay() );
  }

  void
  set_weight( double w )
  {
    wsyn = w;
  }

private:
  double
  facilitate_( double wsyn, double P )
  {
    double deltaw = wmax*aLTP*P;
    wsyn = deltaw + wsyn;

    return wsyn > wmax ? wmax : wsyn;
  }

  double
  depress_( double wsyn, double M )
  {
    double deltaw = -wmax*aLTD*M;
    wsyn = deltaw + wsyn;

    return wsyn < wmin ? wmin : wsyn;
  }

  // data members of each connection
  double tauLTP;
  double aLTP;
  double tauLTD;
  double aLTD;
  double wmax;
  double wmin;

  double deltaw;
  double M;
  double P;
  double wsyn;

  double t_lastspike_;
};


//
// Implementation of class STDPConnection_StdpSongAbbott.
//

//
// Initialization of class STDPConnection_StdpSongAbbott.
//
template < typename targetidentifierT >
STDPConnection_StdpSongAbbott< targetidentifierT >::STDPConnection_StdpSongAbbott()
  : ConnectionBase()
  , tauLTP( 20.0 )
  , aLTP( 0.01 )
  , tauLTD( 20.0 )
  , aLTD( 0.012 )
  , wmin( 0.0 )
  , wmax( 0.0000001 )
  , wsyn( 0.00000005 )
  , P( 0.0 )
  , t_lastspike_( 0.0 )
{
}

template < typename targetidentifierT >
STDPConnection_StdpSongAbbott< targetidentifierT >::STDPConnection_StdpSongAbbott( const STDPConnection_StdpSongAbbott< targetidentifierT >& rhs )
  : ConnectionBase( rhs )
  , tauLTP( rhs.tauLTP )
  , aLTP( rhs.aLTP )
  , tauLTD( rhs.tauLTD )
  , aLTD( rhs.aLTD )
  , wmax( rhs.wmax )
  , wmin( rhs.wmin )
  , deltaw( rhs.deltaw )
  , M( rhs.M )
  , P( rhs.P )
  , wsyn( rhs.wsyn )
  , t_lastspike_( rhs.t_lastspike_ )
{
}

template < typename targetidentifierT >
void
STDPConnection_StdpSongAbbott< targetidentifierT >::get_status( DictionaryDatum& d ) const
{
  ConnectionBase::get_status( d );

  def< double >( d, names::tau_plus, tauLTP );
  def< double >( d, names::A_plus, aLTP);
  def< double >( d, names::tau_minus, tauLTD);
  def< double >( d, names::A_minus, aLTD);
  def< double >( d, names::Wmax, wmax);
  def< double >( d, names::Wmin, wmin);

  def< double >( d, names::weight, wsyn );
  def< double >( d, names::Kplus, P);
  def< long >( d, names::size_of, sizeof( *this ) );

}

template < typename targetidentifierT >
void
STDPConnection_StdpSongAbbott< targetidentifierT >::set_status( const DictionaryDatum& d, ConnectorModel& cm )
{
  ConnectionBase::set_status( d, cm );

  updateValue< double >( d, names::tau_plus, tauLTP );
  updateValue< double >( d, names::A_plus, aLTP);
  updateValue< double >( d, names::tau_minus, tauLTD);
  updateValue< double >( d, names::A_minus, aLTD);
  updateValue< double >( d, names::Wmax, wmax);
  updateValue< double >( d, names::Wmin, wmin);

  updateValue< double >( d, names::weight, wsyn );
  updateValue< double >( d, names::Kplus, P);

  // check if weight_ and Wmax_ has the same sign
  if ( not( ( ( wsyn >= 0 ) - ( wsyn <  0 )) == ( ( wmax >= 0 ) - ( wmax <  0 ) ) ) )
  {
    throw BadProperty( "Weight and Wmax must have same sign." );
  }
}

/**
 * Send an event to the receiver of this connection.
 * \param e The event to send
 * \param t The thread on which this connection is stored.
 * \param cp Common properties object, containing the stdp parameters.
 */
template < typename targetidentifierT >
inline void
STDPConnection_StdpSongAbbott< targetidentifierT >::send( Event& e, thread t, const CommonSynapseProperties& )
{
  // synapse STDP depressing/facilitation dynamics
  const double t_spike = e.get_stamp().get_ms();

  // use accessor functions (inherited from Connection< >) to obtain delay and
  // target
  Node* target = get_target( t );
  double dendritic_delay = get_delay();

  // get spike history in relevant range (t1, t2] from post-synaptic neuron
  std::deque< histentry >::iterator start;
  std::deque< histentry >::iterator finish;

  // For a new synapse, t_lastspike_ contains the point in time of the last
  // spike. So we initially read the
  // history(t_last_spike - dendritic_delay, ..., t_spike-dendritic_delay]
  // which increases the access counter for these entries.
  // At registration, all entries' access counters of
  // history[0, ..., t_last_spike - dendritic_delay] have been
  // incremented by Archiving_Node::register_stdp_connection(). See bug #218 for
  // details.
  target->get_history( t_lastspike_ - dendritic_delay, t_spike - dendritic_delay, &start, &finish );
  // facilitation due to post-synaptic spikes since last pre-synaptic spike
  double minus_dt;
  while ( start != finish )
  {
   minus_dt = t_lastspike_ - ( start->t_ + dendritic_delay );
   ++start;
   // get_history() should make sure that
   // start->t_ > t_lastspike - dendritic_delay, i.e. minus_dt < 0
   assert( minus_dt < -1.0 * kernel().connection_manager.get_stdp_eps() );
   wsyn = facilitate_( wsyn, P * std::exp( minus_dt / tauLTP ) );
  }

  // depression due to new pre-synaptic spike
  wsyn = depress_( wsyn, target->get_K_value( t_spike - dendritic_delay ) );

  e.set_receiver( *target );
  e.set_weight( wsyn );
  // use accessor functions (inherited from Connection< >) to obtain delay in
  // steps and rport
  e.set_delay_steps( get_delay_steps() );
  e.set_rport( get_rport() );
  e();

  P = P * std::exp( ( t_lastspike_ - t_spike) / tauLTP ) + 1.0;

  t_lastspike_ = t_spike;
}

} // of namespace nest

#endif // of #ifndef STDP_CONNECTION_STDPSONGABBOTT_H