/* This file was generated by PyPe9 version 0.2 on Fri 09 Apr 21 06:00:15PM */

#include "StdpSongAbbottmodule.h"

// Model include
#include "StdpSongAbbott.h"

// Generated include
#include "config.h"

// Includes from nestkernel:
#include "connection_manager_impl.h"
#include "connector_model_impl.h"
#include "dynamicloader.h"
#include "exceptions.h"
#include "genericmodel.h"
#include "genericmodel_impl.h"
#include "kernel_manager.h"
#include "model.h"
#include "model_manager_impl.h"
#include "nestmodule.h"
#include "target_identifier.h"

// Includes from sli:
#include "booldatum.h"
#include "integerdatum.h"
#include "sliexceptions.h"
#include "tokenarray.h"


// -- Interface to dynamic module loader ---------------------------------------

/*
 * The dynamic module loader must be able to find your module.
 * You make the module known to the loader by defining an instance of your
 * module class in global scope. This instance must have the name
 *
 * <modulename>_LTX_mod
 *
 * The dynamicloader can then load modulename and search for symbol "mod" in it.
 */

nineml::StdpSongAbbottModule StdpSongAbbottModule_LTX_mod;

// -- DynModule functions ------------------------------------------------------

nineml::StdpSongAbbottModule::StdpSongAbbottModule() {
#ifdef LINKED_MODULE
     // register this module at the dynamic loader
     // this is needed to allow for linking in this module at compile time
     // all registered modules will be initialized by the main app's dynamic loader
     nest::DynamicLoaderModule::registerLinkedModule(this);
#endif
}

nineml::StdpSongAbbottModule::~StdpSongAbbottModule() {}

const std::string nineml::StdpSongAbbottModule::name(void) const {
    return std::string("PyPe9-generated module for StdpSongAbbott class"); // Return name of the module
}

const std::string nineml::StdpSongAbbottModule::commandstring(void) const {
 /* 1. Tell interpreter that we provide the C++ part of StdpSongAbbottModule with the
       current revision number.
    2. Instruct the interpreter to check that StdpSongAbbottModule.sli exists,
       provides at least version 1.0 of the SLI interface to StdpSongAbbottModule, and
       to load it.
  */
    return std::string("(StdpSongAbbottModule-init) run");
}

//-------------------------------------------------------------------------------------

void nineml::StdpSongAbbottModule::init( SLIInterpreter* i ) {
    /* Register a neuron or device model.
       Give node type as template argument and the name as an argument.
    */
   nest::kernel().model_manager.register_node_model<StdpSongAbbott>("StdpSongAbbott");

}  // StdpSongAbbottModule::init()